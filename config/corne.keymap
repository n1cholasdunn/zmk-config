/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp F  &kp P  &kp B             &kp J      &kp L  &kp U      &kp Y    &kp SINGLE_QUOTE  &kp BSPC
&kp LCTRL         &kp A  &kp R  &kp S  &kp T  &kp G             &kp M      &kp N  &kp E      &kp I    &kp O             &kp SEMICOLON
&kp LEFT_COMMAND  &kp Z  &kp X  &kp C  &kp D  &kp V             &kp K      &kp H  &kp COMMA  &kp DOT  &kp FSLH          &kp UNDERSCORE
                                &mo 3  &mo 1  &kp LEFT_SHIFT    &kp SPACE  &mo 2  &kp RALT
            >;
        };

        extend_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp ESC     &kp N2        &kp N3     &kp N4   &kp N5          &kp N6     &kp N7          &kp UP_ARROW  &kp N9     &kp CAPSLOCK  &kp K_MUTE
&trans  &bt BT_CLR  &bt BT_SEL 0  &none      &kp ESC  &kp LEFT_ALT    &kp LEFT   &kp DOWN_ARROW  &kp UP        &kp RIGHT  &kp DELETE    &kp C_NEXT
&trans  &kp LC(Z)   &kp LC(X)     &kp LC(C)  &trans   &kp LC(V)       &kp ENTER  &kp BACKSPACE   &kp TAB       &none      &none         &kp C_PREV
                                  &trans     &trans   &kp SPACE       &kp RET    &trans          &kp RALT
            >;
        };

        symbol_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCL       &kp AT     &kp HASH   &kp DLLR          &kp PRCNT        &kp KP_EQUAL  &kp GRAVE              &kp COLON        &kp SEMI           &kp KP_PLUS       &kp BSPC
&trans  &kp PLUS       &kp MINUS  &kp EQUAL  &kp AMPERSAND     &kp CARET        &kp ASTRK     &kp LEFT_PARENTHESIS   &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp LESS_THAN     &trans
&trans  &kp LESS_THAN  &kp SLASH  &kp PIPE   &kp GREATER_THAN  &kp BACKSLASH    &kp TILDE     &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp GREATER_THAN  &kp TILDE
                                  &trans     &trans            &kp SPACE        &kp RET       &trans                 &kp RALT
            >;
        };

        num_pad {
            bindings = <
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &none     &kp EQUAL        &kp KP_N7  &kp KP_N8        &kp KP_N9  &kp PLUS   &trans
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &none     &kp ASTERISK     &kp KP_N4  &kp KP_N5        &kp KP_N6  &kp MINUS  &none
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &none     &kp KP_NUMBER_0  &kp KP_N1  &kp KP_NUMBER_2  &kp KP_N3  &kp SLASH  &none
                         &trans   &trans   &trans    &trans           &trans     &trans
            >;
        };
    };
};
